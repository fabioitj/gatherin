// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Category {
  ACOES
  FII
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  passwordHash  String
  birthDate     DateTime? 
  cpf           String?   @unique
  phoneNumber   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  favorites     Favorite[]
  wallet        Wallet?

  @@map("users")
}

model News {
  id          String   @id @default(cuid())
  title       String   @unique
  summary     String
  content     String
  imageUrl    String?
  source      String
  sourceUrl   String   @unique
  publishedAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  category    Category
  tags        String[] @default([])
  tickers     String[] @default([])
  favorites   Favorite[]
  
  @@index([publishedAt])
  @@index([category])
  @@index([title])
  @@map("news")
}

model Favorite {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  news      News     @relation(fields: [newsId], references: [id], onDelete: Cascade)
  newsId    String
  createdAt DateTime @default(now())

  @@unique([userId, newsId])
  @@map("favorites")
}

enum AssetType {
  STOCK
  FII
}

model Wallet {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  assets    Asset[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("wallets")
}

model Asset {
  id            String    @id @default(cuid())
  wallet        Wallet    @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId      String
  ticker        String
  type          AssetType
  quantity      Int
  averagePrice  Float
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([walletId, ticker])
  @@map("assets")
}

model AssetRecommendation {
  id                    String   @id @default(cuid())
  baseAsset            String
  recommendedAsset     String
  similarityScore      Float
  support              Float
  confidence           Float
  usersWithBoth        Int
  usersWithBase        Int
  percentageAlsoInvest Float
  recommendationStrength Float
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@unique([baseAsset, recommendedAsset])
  @@map("asset_recommendations")
}

model AssetData {
  id          String   @id @default(cuid())
  ticker      String   @unique
  name        String
  type        AssetType
  sector      String?
  logoUrl     String?
  currentPrice Float?
  change      Float?
  volume      Int?
  marketCap   Float?
  isActive    Boolean  @default(true)
  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([type])
  @@index([ticker])
  @@index([name])
  @@map("asset_data")
}