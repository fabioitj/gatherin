generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(cuid())
  name         String
  email        String     @unique
  passwordHash String
  birthDate    DateTime?
  cpf          String?    @unique
  phoneNumber  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  favorites    Favorite[]
  wallet       Wallet?

  @@map("users")
}

model News {
  id          String     @id @default(cuid())
  title       String     @unique
  summary     String
  content     String
  imageUrl    String?
  source      String
  sourceUrl   String     @unique
  publishedAt DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  category    Category
  tags        String[]   @default([])
  tickers     String[]   @default([])
  favorites   Favorite[]

  @@index([publishedAt])
  @@index([category])
  @@index([title])
  @@map("news")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  newsId    String
  createdAt DateTime @default(now())
  news      News     @relation(fields: [newsId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, newsId])
  @@map("favorites")
}

model Wallet {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  assets    Asset[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallets")
}

model Asset {
  id           String    @id @default(cuid())
  walletId     String
  ticker       String
  type         AssetType
  quantity     Int
  averagePrice Float
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  wallet       Wallet    @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@unique([walletId, ticker])
  @@map("assets")
}

model AssetRecommendation {
  id                     String   @id @default(cuid())
  baseAsset              String
  recommendedAsset       String
  similarityScore        Float
  support                Float
  confidence             Float
  usersWithBoth          Int
  usersWithBase          Int
  percentageAlsoInvest   Float
  recommendationStrength Float
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@unique([baseAsset, recommendedAsset])
  @@map("asset_recommendations")
}

model AssetData {
  id           String    @id @default(cuid())
  ticker       String    @unique
  name         String
  type         AssetType
  sector       String?
  logoUrl      String?
  currentPrice Float?
  change       Float?
  volume       Int?
  marketCap    Float?
  isActive     Boolean   @default(true)
  lastUpdated  DateTime  @default(now())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([type])
  @@index([ticker])
  @@index([name])
  @@index([name], map: "idx_asset_data_name")
  @@index([ticker], map: "idx_asset_data_ticker")
  @@index([type], map: "idx_asset_data_type")
  @@map("asset_data")
}

model cache_metadata {
  key       String    @id @db.VarChar(50)
  value     String?
  updatedAt DateTime? @default(now()) @db.Timestamp(6)
}

enum Category {
  ACOES
  FII
}

enum AssetType {
  STOCK
  FII
}
